<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Run">
    <Target Name="Run">
        <CallTarget Targets="Compile" />
        <CallTarget Targets="Verify" Condition="$(SignAssembly) == true"/>
        <CallTarget Targets="Package" Condition="'$(Ext)' != '.CF'" />
    </Target>

    <Target Name="Clean">
        <ItemGroup>
            <MonoCrossClean Include="$(ProjectDir)/bin/**" />
            <MonoCrossClean Include="$(ProjectDir)/obj/**" />
        </ItemGroup>
        <Delete Files="@(MonoCrossClean)" />
    </Target>

    <Target Name="Compile" DependsOnTargets="Clean">
        <MSBuild Projects="$(ProjectDir)/MonoCross$(Ext).csproj" Condition="'$(Ext)' != ''" />
        <Exec WorkingDirectory="$(ProjectDir)" Command="dotnet build /p:SignAssembly=$(SignAssembly);Configuration=$(Configuration) $(ProjectDir)/MonoCross.csproj" Condition="'$(Ext)' == ''" />
    </Target>

    <Target Name="Verify">
        <ItemGroup>
            <MonoCrossVerify Include="Distribution/MonoCross$(Ext).dll" />
        </ItemGroup>
        <Exec Command='"$(SDK40ToolsPath)sn" -q -v %(MonoCrossVerify.Identity) >> verify.txt' ContinueOnError="true" />
        <ReadLinesFromFile File="verify.txt">
            <Output TaskParameter="Lines" PropertyName="Verify" />
        </ReadLinesFromFile>
        <Delete Files="verify.txt" />
        <Error Text="$(Verify)" Condition="'$(Verify)' != ''" />
    </Target>

    <Target Name="Package">
      <!-- <XmlRead XPath="//dependency/@id" XmlFileName="$(ProjectDir)/MonoCross$(Ext).nuspec"> -->
        <!-- <Output TaskParameter="Value" PropertyName="_Deps" /> -->
      <!-- </XmlRead> -->
      <!-- <XmlRead XPath="//dependency/@version" XmlFileName="$(ProjectDir)/MonoCross$(Ext).nuspec"> -->
        <!-- <Output TaskParameter="Value" ItemName="Formats" /> -->
      <!-- </XmlRead> -->
      <ItemGroup>
        <_DepPaths Include="$(_Deps.Split(';'))"/>
        <DepPaths Include="Distribution/%(_DepPaths.Identity).dll"/>
      </ItemGroup>
      <GetFileVersion Files="@(DepPaths)" Formats="@(Formats)">
        <Output TaskParameter="Value" ItemName="Dependencies" />
      </GetFileVersion>
      <!-- <XmlUpdate XPath="//dependency[@id=&quot;%(Dependencies.Name)&quot;]/@version" -->
            <!-- XmlFileName="$(ProjectDir)/MonoCross$(Ext).nuspec" -->
            <!-- Value="%(Version)"/> -->
      <Exec WorkingDirectory="$(ProjectDir)" Command="nuget pack -Symbols -Version $(AssemblyVersion) MonoCross$(Ext).csproj -Prop Configuration=$(Configuration)" />
      <Exec WorkingDirectory="$(ProjectDir)" Command="git checkout -- MonoCross$(Ext).nuspec" />
    </Target>

  <UsingTask TaskName="GetFileVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
        <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        <Formats ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" />
        <Value ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
        <Using Namespace="System.IO"/>
        <Using Namespace="System.Diagnostics"/>
        <Code Type="Fragment" Language="cs">
<![CDATA[  
      if (Files.Length > 0)  
      {  
        Value = new TaskItem[Files.Length];  
        for (int i = 0; i < Files.Length; i++)  
        {
          ITaskItem item = Files[i];
          var info = new FileInfo(item.GetMetadata("FullPath"));
          item = new TaskItem(item.ItemSpec);
          Value[i] = item;
          item.SetMetadata("Name", info.Name.Remove(info.Name.Length - info.Extension.Length));

          var version = info.Exists ? FileVersionInfo.GetVersionInfo(info.FullName).FileVersion : null;
          if (string.IsNullOrEmpty(version))
          {
              item.SetMetadata("Version", string.Empty);
              continue;
          }

          var format = Formats != null && Formats.Length > 0 ? Formats[i].ItemSpec : null;
          while (!string.IsNullOrEmpty(format) && format.ToCharArray().Count(c => c =='.') <  version.ToCharArray().Count(c => c =='.'))
              version = version.Remove(version.LastIndexOf('.'));
          item.SetMetadata("Version", version);
        }
      }
]]>
        </Code>
    </Task>
  </UsingTask>
</Project>
